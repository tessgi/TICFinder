{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TICFinder This tool helps you go from J2000 RA, Dec and [optionally] magnitude of sources and convert to TIC numbers, using the most up-to-date TIC catalog. Example Usage Using the TICFinder class, you can pass RA, Dec and optionally magnitude to search for TIC IDs. ( Note: You must use J2000 epoch RA and Dec .) To use the class, pass in your RA, Dec and optional magnitude, and then use the get_tics class method to query for the TIC IDs. You can then access the tic attribute, or use the to_pandas method to create a csv file of your input with TIC IDs. from ticfinder import TICFinder tf = TICFinder ( ra = 84.2911880010838 , dec =- 80.4691198186792 , magnitude = 5.5 ) . get_tics () print ( tf . tic ) >>> [ 261136679 ] You can also load a dataframe or a csv file. tf = TICFinder . from_pandas ( df ) tf . get_tics () print ( tf . tic ) >>> [ 261136679 , 261136641 , 261136690 , ... ] tf . to_pandas () tf.to_pandas will return a pandas.DataFrame with columns [ 'TIC' , 'RA' , 'Dec' , 'Tmag' , 'input_magnitude' , 'pix_sep' , 'motion_from_2000_to_YEAR_in_pixels' ]","title":"Home"},{"location":"#ticfinder","text":"This tool helps you go from J2000 RA, Dec and [optionally] magnitude of sources and convert to TIC numbers, using the most up-to-date TIC catalog.","title":"TICFinder"},{"location":"#example-usage","text":"Using the TICFinder class, you can pass RA, Dec and optionally magnitude to search for TIC IDs. ( Note: You must use J2000 epoch RA and Dec .) To use the class, pass in your RA, Dec and optional magnitude, and then use the get_tics class method to query for the TIC IDs. You can then access the tic attribute, or use the to_pandas method to create a csv file of your input with TIC IDs. from ticfinder import TICFinder tf = TICFinder ( ra = 84.2911880010838 , dec =- 80.4691198186792 , magnitude = 5.5 ) . get_tics () print ( tf . tic ) >>> [ 261136679 ] You can also load a dataframe or a csv file. tf = TICFinder . from_pandas ( df ) tf . get_tics () print ( tf . tic ) >>> [ 261136679 , 261136641 , 261136690 , ... ] tf . to_pandas () tf.to_pandas will return a pandas.DataFrame with columns [ 'TIC' , 'RA' , 'Dec' , 'Tmag' , 'input_magnitude' , 'pix_sep' , 'motion_from_2000_to_YEAR_in_pixels' ]","title":"Example Usage"},{"location":"ticfinder/","text":"Documentation for TICFinder ticfinder.ticfinder Find TIC numbers from RA, Dec and Mag TICFinder dataclass TICFinder class converts RA, Dec and optionally magnitude into TIC numbers. TICFinder queries TIC and finds closest matches. Matches are weighted by a) Their inverse square distance to the input RA/Dec b) Their relative flux compared to the input magnitude if magnitudes are supplied. Note You must input RA and Dec in J2000 epoch. Parameters: Name Type Description Default ra List Array of RA values. MUST be in J2000 epoch required dec List Array of RA values. MUST be in J2000 epoch required magnitude Optional Array of magnitude values. Presumed to be close to TESS Magnitude and Gaia RP magnitude. None Source code in ticfinder/ticfinder.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @dataclass class TICFinder : \"\"\"TICFinder class converts RA, Dec and optionally magnitude into TIC numbers. TICFinder queries TIC and finds closest matches. Matches are weighted by a) Their inverse square distance to the input RA/Dec b) Their relative flux compared to the input magnitude if magnitudes are supplied. **Note** You must input RA and Dec in J2000 epoch. Parameters ---------- ra: List or npt.NDArray Array of RA values. MUST be in J2000 epoch dec: List or npt.NDArray Array of RA values. MUST be in J2000 epoch magnitude: Optional, List or npt.NDArray Array of magnitude values. Presumed to be close to TESS Magnitude and Gaia RP magnitude. \"\"\" ra : List dec : List magnitude : Optional = None def __post_init__ ( self ): self . tap = TapPlus ( url = \"http://TAPVizieR.u-strasbg.fr/TAPVizieR/tap\" ) if ( self . ra is None ) | ( self . dec is None ): raise ValueError ( \"Please pass RA and Dec\" ) if not hasattr ( self . ra , \"__iter__\" ): self . ra = [ self . ra ] if not hasattr ( self . dec , \"__iter__\" ): self . dec = [ self . dec ] if self . magnitude is None : log . warning ( \"No magnitudes supplied\" ) else : if not hasattr ( self . magnitude , \"__iter__\" ): self . magnitude = [ self . magnitude ] self . epoch_decimal = Time . now () . decimalyear self . epoch = np . floor ( self . epoch_decimal ) . astype ( int ) def __repr__ ( self ): return f \"TICFinder ( { len ( self . ra ) } Targets)\" @staticmethod def from_csv ( fname ): \"\"\"Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters ---------- fname : str Filename \"\"\" return TICFinder . from_pandas ( pd . read_csv ( fname )) @staticmethod def from_pandas ( df ): \"\"\"Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters ---------- df : pd.DataFrame pandas dataframe \"\"\" def get_column ( keys ): hits = [ key in df . columns for key in keys ] if np . any ( hits ): return np . asarray ( df [ np . asarray ( keys )[[ key in df . columns for key in keys ]][ 0 ]] ) else : return None return TICFinder ( ra = get_column ([ \"ra\" , \"RA\" , \"RAJ2000\" , \"ra [ deg ]\" ]), dec = get_column ([ \"dec\" , \"Dec\" , \"DEC\" , \"DEJ2000\" , \"dec [ deg ]\" ]), magnitude = get_column ( [ \"tmag\" , \"magnitude\" , \"mag\" , \"tess_mag [ mag ]\" , \"tess_mag\" , \"Tmag\" ] ), ) def get_tics ( self , non_null_motion_only = False , show_progress = True ): \"\"\"Populates the `tic` attribute. Run this to fetch the TIC numbers Parameters ---------- non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. show_progress: bool Whether to show a progress bar. You can silence the progress bar by setting this to False. \"\"\" gdf = [] for idx in tqdm ( range ( len ( self . ra )), desc = \"Cross matching targets\" ): ra , dec , magnitude = ( self . ra [ idx ], self . dec [ idx ], self . magnitude if self . magnitude is None else self . magnitude [ idx ], ) for idx in np . arange ( 1 , 4 ): radius = 50 * idx ** 2 / 3600.0 query = get_query ( ra , dec , magnitude , radius = radius , non_null_motion_only = non_null_motion_only , ntarg = 1 , ) job = self . tap . launch_job ( query ) series = job . get_results () . to_pandas () if len ( series ) != 0 : break if len ( series ) == 0 : series = pd . Series ( index = [ \"ra_input\" , \"dec_input\" , \"magnitude_input\" , \"TIC\" , \"RAJ2000\" , \"DEJ2000\" , \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" , \"RPmag\" , \"Bmag\" , \"Vmag\" , \"Hmag\" , \"Kmag\" , \"Jmag\" , \"pix_sep\" , \"weight\" , \"RAJ2022\" , \"DEJ2022\" , \"tmag\" , \"motion_from_2000_to_2022_in_pixels\" , ], dtype = np . float64 , ) series [[ \"ra_input\" , \"dec_input\" , \"magnitude_input\" ]] = ( ra , dec , magnitude if magnitude is not None else np . nan , ) series = pd . DataFrame ([ series ]) if len ( series ) != 1 : raise ValueError gdf . append ( series ) gdf = pd . concat ( gdf ) . reset_index ( drop = True ) self . gdf = self . _clean_dataframe ( gdf ) self . tic = np . asarray ( gdf . TIC ) self . best_fit_ra = np . asarray ( gdf [ \"RAJ2000\" ]) self . best_fit_dec = np . asarray ( gdf [ \"DEJ2000\" ]) self . best_fit_magnitude = np . asarray ( gdf . tmag ) self . motion_in_pixels = np . asarray ( gdf [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] ) def _clean_dataframe ( self , df ): df [[ \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" ]] = df [ [ \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" ] ] . fillna ( 0 ) df [[ f \"RAJ { self . epoch } \" , f \"DEJ { self . epoch } \" , \"tmag\" ]] = np . nan df . loc [ np . abs ( df . Plx / df . e_Plx ) < 2 , \"Plx\" ] = 1e-5 df . loc [ df . Plx == 0 , \"Plx\" ] = 1e-5 def clean ( x ): return x if np . isfinite ( x ) else None with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) for idx in range ( len ( df )): c = SkyCoord ( df . loc [ idx ][ \"RAJ2000\" ] * u . deg , df . loc [ idx ][ \"DEJ2000\" ] * u . deg , frame = \"icrs\" , obstime = \"2020-01-01T00:00:00\" , pm_ra_cosdec = df . loc [ idx ][ \"pmRA\" ] * u . mas / u . yr , pm_dec = df . loc [ idx ][ \"pmDE\" ] * u . mas / u . yr , distance = Distance ( parallax = df . loc [ idx ][ \"Plx\" ] * u . mas , allow_negative = True ), ) . apply_space_motion ( dt = ( self . epoch_decimal - 2000 ) * u . year ) tmag = ticgen . Star ( Bmag = clean ( df . loc [ idx , \"Bmag\" ]), Vmag = clean ( df . loc [ idx , \"Vmag\" ]), Jmag = clean ( df . loc [ idx , \"Jmag\" ]), Hmag = clean ( df . loc [ idx , \"Hmag\" ]), Ksmag = clean ( df . loc [ idx , \"Kmag\" ]), ) . Tmag df . loc [ idx , [ f \"RAJ { self . epoch } \" , f \"DEJ { self . epoch } \" , \"tmag\" ] ] = np . hstack ([ c . ra . deg , c . dec . deg , tmag ]) df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = ( np . asarray ( np . hypot ( df . RAJ2000 - df [ f \"RAJ { self . epoch } \" ], df . DEJ2000 - df [ f \"DEJ { self . epoch } \" ], ) ) * u . deg . to ( u . arcsecond ) / 21 ) return df def to_pandas ( self , ** kwargs ): \"\"\"Converts object to a pandas dataframe for easy storing\"\"\" if not hasattr ( self , \"tic\" ): log . warning ( \"Run `get_tics` first.\" ) return df = pd . DataFrame ( np . vstack ( [ self . tic , self . best_fit_ra , self . best_fit_dec , self . best_fit_magnitude ] ) . T , columns = [ \"TIC\" , \"RA\" , \"Dec\" , \"Tmag\" ], ) if self . magnitude is not None : df [ \"input_magnitude\" ] = self . magnitude df [ \"pix_sep\" ] = self . gdf [ \"pix_sep\" ] df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = self . motion_in_pixels return df def get_target_matches ( self , idx , radius = 0.014 , ntarg = None , non_null_motion_only = False ): \"\"\"Returns an ordered dataframe of the matches to the input Parameters ---------- idx: int The index of the target to calculate the matches for. radius: float Radius in degrees to query around ntarg: Optional, int Number of targets to return. If None, will return all matches. non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. Returns ------- df : pd.DataFrame pandas containing all the information on all matches around the `idx` index target. \"\"\" ra , dec , mag = ( self . ra [ idx ], self . dec [ idx ], self . magnitude [ idx ] if self . magnitude is not None else None , ) log . info ( f \"RA: { ra } , Dec: { dec } , Mag: { mag } \" ) query = get_query ( ra , dec , mag , radius = radius , ntarg = ntarg , non_null_motion_only = non_null_motion_only , ) df = self . tap . launch_job ( query ) . get_results () . to_pandas () return self . _clean_dataframe ( df ) from_csv ( fname ) staticmethod Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters: Name Type Description Default fname str Filename required Source code in ticfinder/ticfinder.py 65 66 67 68 69 70 71 72 73 74 @staticmethod def from_csv ( fname ): \"\"\"Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters ---------- fname : str Filename \"\"\" return TICFinder . from_pandas ( pd . read_csv ( fname )) from_pandas ( df ) staticmethod Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters: Name Type Description Default df pd . DataFrame pandas dataframe required Source code in ticfinder/ticfinder.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @staticmethod def from_pandas ( df ): \"\"\"Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters ---------- df : pd.DataFrame pandas dataframe \"\"\" def get_column ( keys ): hits = [ key in df . columns for key in keys ] if np . any ( hits ): return np . asarray ( df [ np . asarray ( keys )[[ key in df . columns for key in keys ]][ 0 ]] ) else : return None return TICFinder ( ra = get_column ([ \"ra\" , \"RA\" , \"RAJ2000\" , \"ra [ deg ]\" ]), dec = get_column ([ \"dec\" , \"Dec\" , \"DEC\" , \"DEJ2000\" , \"dec [ deg ]\" ]), magnitude = get_column ( [ \"tmag\" , \"magnitude\" , \"mag\" , \"tess_mag [ mag ]\" , \"tess_mag\" , \"Tmag\" ] ), ) get_target_matches ( idx , radius = 0.014 , ntarg = None , non_null_motion_only = False ) Returns an ordered dataframe of the matches to the input Parameters: Name Type Description Default idx The index of the target to calculate the matches for. required radius Radius in degrees to query around 0.014 ntarg Number of targets to return. If None, will return all matches. None non_null_motion_only Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. False Returns: Name Type Description df pd . DataFrame pandas containing all the information on all matches around the idx index target. Source code in ticfinder/ticfinder.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 def get_target_matches ( self , idx , radius = 0.014 , ntarg = None , non_null_motion_only = False ): \"\"\"Returns an ordered dataframe of the matches to the input Parameters ---------- idx: int The index of the target to calculate the matches for. radius: float Radius in degrees to query around ntarg: Optional, int Number of targets to return. If None, will return all matches. non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. Returns ------- df : pd.DataFrame pandas containing all the information on all matches around the `idx` index target. \"\"\" ra , dec , mag = ( self . ra [ idx ], self . dec [ idx ], self . magnitude [ idx ] if self . magnitude is not None else None , ) log . info ( f \"RA: { ra } , Dec: { dec } , Mag: { mag } \" ) query = get_query ( ra , dec , mag , radius = radius , ntarg = ntarg , non_null_motion_only = non_null_motion_only , ) df = self . tap . launch_job ( query ) . get_results () . to_pandas () return self . _clean_dataframe ( df ) get_tics ( non_null_motion_only = False , show_progress = True ) Populates the tic attribute. Run this to fetch the TIC numbers Parameters: Name Type Description Default non_null_motion_only Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. False show_progress Whether to show a progress bar. You can silence the progress bar by setting this to False. True Source code in ticfinder/ticfinder.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def get_tics ( self , non_null_motion_only = False , show_progress = True ): \"\"\"Populates the `tic` attribute. Run this to fetch the TIC numbers Parameters ---------- non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. show_progress: bool Whether to show a progress bar. You can silence the progress bar by setting this to False. \"\"\" gdf = [] for idx in tqdm ( range ( len ( self . ra )), desc = \"Cross matching targets\" ): ra , dec , magnitude = ( self . ra [ idx ], self . dec [ idx ], self . magnitude if self . magnitude is None else self . magnitude [ idx ], ) for idx in np . arange ( 1 , 4 ): radius = 50 * idx ** 2 / 3600.0 query = get_query ( ra , dec , magnitude , radius = radius , non_null_motion_only = non_null_motion_only , ntarg = 1 , ) job = self . tap . launch_job ( query ) series = job . get_results () . to_pandas () if len ( series ) != 0 : break if len ( series ) == 0 : series = pd . Series ( index = [ \"ra_input\" , \"dec_input\" , \"magnitude_input\" , \"TIC\" , \"RAJ2000\" , \"DEJ2000\" , \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" , \"RPmag\" , \"Bmag\" , \"Vmag\" , \"Hmag\" , \"Kmag\" , \"Jmag\" , \"pix_sep\" , \"weight\" , \"RAJ2022\" , \"DEJ2022\" , \"tmag\" , \"motion_from_2000_to_2022_in_pixels\" , ], dtype = np . float64 , ) series [[ \"ra_input\" , \"dec_input\" , \"magnitude_input\" ]] = ( ra , dec , magnitude if magnitude is not None else np . nan , ) series = pd . DataFrame ([ series ]) if len ( series ) != 1 : raise ValueError gdf . append ( series ) gdf = pd . concat ( gdf ) . reset_index ( drop = True ) self . gdf = self . _clean_dataframe ( gdf ) self . tic = np . asarray ( gdf . TIC ) self . best_fit_ra = np . asarray ( gdf [ \"RAJ2000\" ]) self . best_fit_dec = np . asarray ( gdf [ \"DEJ2000\" ]) self . best_fit_magnitude = np . asarray ( gdf . tmag ) self . motion_in_pixels = np . asarray ( gdf [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] ) to_pandas ( ** kwargs ) Converts object to a pandas dataframe for easy storing Source code in ticfinder/ticfinder.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def to_pandas ( self , ** kwargs ): \"\"\"Converts object to a pandas dataframe for easy storing\"\"\" if not hasattr ( self , \"tic\" ): log . warning ( \"Run `get_tics` first.\" ) return df = pd . DataFrame ( np . vstack ( [ self . tic , self . best_fit_ra , self . best_fit_dec , self . best_fit_magnitude ] ) . T , columns = [ \"TIC\" , \"RA\" , \"Dec\" , \"Tmag\" ], ) if self . magnitude is not None : df [ \"input_magnitude\" ] = self . magnitude df [ \"pix_sep\" ] = self . gdf [ \"pix_sep\" ] df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = self . motion_in_pixels return df get_query ( ra , dec , magnitude = None , ntarg = None , radius = 0.014 , non_null_motion_only = False ) Builds a TAP query to get matches for a given RA, Dec and magnitude. Source code in ticfinder/ticfinder.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def get_query ( ra , dec , magnitude = None , ntarg = None , radius = 0.014 , non_null_motion_only = False ): \"\"\"Builds a TAP query to get matches for a given RA, Dec and magnitude.\"\"\" motion = [ \"\"\"\\nAND pmRA IS NOT NULL AND pmDE IS NOT NULL AND Plx IS NOT NULL \"\"\" if non_null_motion_only else \"\" ][ 0 ] ntarg_statement = f \"\"\"TOP { ntarg } \"\"\" if ntarg is not None else \"\" mag0 = f \"\"\" { magnitude } as magnitude_input,\"\"\" if magnitude is not None else \"\" mag1 = ( f \"\"\"* 1/(2*POWER(10, ABS( { magnitude } - RPMag) * -0.4))\"\"\" if magnitude is not None else \"\" ) mag2 = ( f \"\"\"AND RPmag >= { magnitude - 3 } AND RPmag <= { magnitude + 3 } \"\"\" if magnitude is not None else \"\" ) query = f \"\"\"SELECT { ntarg_statement } { ra } as ra_input, { dec } as dec_input, { mag0 } TIC, RAJ2000, DEJ2000, pmRA, pmDE, Plx, e_Plx, RPmag, Bmag, Vmag, Hmag, Kmag, Jmag, DISTANCE( POINT('ICRS', RAJ2000, DEJ2000), POINT('ICRS', { ra } , { dec } )) * 3600/21 as pix_sep, 1/POWER(DISTANCE( POINT('ICRS', RAJ2000, DEJ2000), POINT('ICRS', { ra } , { dec } )) * 3600/21, 2) { mag1 } as weight FROM \"IV/38/tic\" WHERE 1=CONTAINS(POINT('ICRS',RAJ2000,DEJ2000), CIRCLE('ICRS', { ra } , { dec } , { radius } )) { mag2 } { motion } ORDER BY weight DESC\"\"\" return query","title":"API"},{"location":"ticfinder/#documentation-for-ticfinder","text":"","title":"Documentation for TICFinder"},{"location":"ticfinder/#ticfinder.ticfinder","text":"Find TIC numbers from RA, Dec and Mag","title":"ticfinder"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder","text":"TICFinder class converts RA, Dec and optionally magnitude into TIC numbers. TICFinder queries TIC and finds closest matches. Matches are weighted by a) Their inverse square distance to the input RA/Dec b) Their relative flux compared to the input magnitude if magnitudes are supplied. Note You must input RA and Dec in J2000 epoch. Parameters: Name Type Description Default ra List Array of RA values. MUST be in J2000 epoch required dec List Array of RA values. MUST be in J2000 epoch required magnitude Optional Array of magnitude values. Presumed to be close to TESS Magnitude and Gaia RP magnitude. None Source code in ticfinder/ticfinder.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @dataclass class TICFinder : \"\"\"TICFinder class converts RA, Dec and optionally magnitude into TIC numbers. TICFinder queries TIC and finds closest matches. Matches are weighted by a) Their inverse square distance to the input RA/Dec b) Their relative flux compared to the input magnitude if magnitudes are supplied. **Note** You must input RA and Dec in J2000 epoch. Parameters ---------- ra: List or npt.NDArray Array of RA values. MUST be in J2000 epoch dec: List or npt.NDArray Array of RA values. MUST be in J2000 epoch magnitude: Optional, List or npt.NDArray Array of magnitude values. Presumed to be close to TESS Magnitude and Gaia RP magnitude. \"\"\" ra : List dec : List magnitude : Optional = None def __post_init__ ( self ): self . tap = TapPlus ( url = \"http://TAPVizieR.u-strasbg.fr/TAPVizieR/tap\" ) if ( self . ra is None ) | ( self . dec is None ): raise ValueError ( \"Please pass RA and Dec\" ) if not hasattr ( self . ra , \"__iter__\" ): self . ra = [ self . ra ] if not hasattr ( self . dec , \"__iter__\" ): self . dec = [ self . dec ] if self . magnitude is None : log . warning ( \"No magnitudes supplied\" ) else : if not hasattr ( self . magnitude , \"__iter__\" ): self . magnitude = [ self . magnitude ] self . epoch_decimal = Time . now () . decimalyear self . epoch = np . floor ( self . epoch_decimal ) . astype ( int ) def __repr__ ( self ): return f \"TICFinder ( { len ( self . ra ) } Targets)\" @staticmethod def from_csv ( fname ): \"\"\"Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters ---------- fname : str Filename \"\"\" return TICFinder . from_pandas ( pd . read_csv ( fname )) @staticmethod def from_pandas ( df ): \"\"\"Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters ---------- df : pd.DataFrame pandas dataframe \"\"\" def get_column ( keys ): hits = [ key in df . columns for key in keys ] if np . any ( hits ): return np . asarray ( df [ np . asarray ( keys )[[ key in df . columns for key in keys ]][ 0 ]] ) else : return None return TICFinder ( ra = get_column ([ \"ra\" , \"RA\" , \"RAJ2000\" , \"ra [ deg ]\" ]), dec = get_column ([ \"dec\" , \"Dec\" , \"DEC\" , \"DEJ2000\" , \"dec [ deg ]\" ]), magnitude = get_column ( [ \"tmag\" , \"magnitude\" , \"mag\" , \"tess_mag [ mag ]\" , \"tess_mag\" , \"Tmag\" ] ), ) def get_tics ( self , non_null_motion_only = False , show_progress = True ): \"\"\"Populates the `tic` attribute. Run this to fetch the TIC numbers Parameters ---------- non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. show_progress: bool Whether to show a progress bar. You can silence the progress bar by setting this to False. \"\"\" gdf = [] for idx in tqdm ( range ( len ( self . ra )), desc = \"Cross matching targets\" ): ra , dec , magnitude = ( self . ra [ idx ], self . dec [ idx ], self . magnitude if self . magnitude is None else self . magnitude [ idx ], ) for idx in np . arange ( 1 , 4 ): radius = 50 * idx ** 2 / 3600.0 query = get_query ( ra , dec , magnitude , radius = radius , non_null_motion_only = non_null_motion_only , ntarg = 1 , ) job = self . tap . launch_job ( query ) series = job . get_results () . to_pandas () if len ( series ) != 0 : break if len ( series ) == 0 : series = pd . Series ( index = [ \"ra_input\" , \"dec_input\" , \"magnitude_input\" , \"TIC\" , \"RAJ2000\" , \"DEJ2000\" , \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" , \"RPmag\" , \"Bmag\" , \"Vmag\" , \"Hmag\" , \"Kmag\" , \"Jmag\" , \"pix_sep\" , \"weight\" , \"RAJ2022\" , \"DEJ2022\" , \"tmag\" , \"motion_from_2000_to_2022_in_pixels\" , ], dtype = np . float64 , ) series [[ \"ra_input\" , \"dec_input\" , \"magnitude_input\" ]] = ( ra , dec , magnitude if magnitude is not None else np . nan , ) series = pd . DataFrame ([ series ]) if len ( series ) != 1 : raise ValueError gdf . append ( series ) gdf = pd . concat ( gdf ) . reset_index ( drop = True ) self . gdf = self . _clean_dataframe ( gdf ) self . tic = np . asarray ( gdf . TIC ) self . best_fit_ra = np . asarray ( gdf [ \"RAJ2000\" ]) self . best_fit_dec = np . asarray ( gdf [ \"DEJ2000\" ]) self . best_fit_magnitude = np . asarray ( gdf . tmag ) self . motion_in_pixels = np . asarray ( gdf [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] ) def _clean_dataframe ( self , df ): df [[ \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" ]] = df [ [ \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" ] ] . fillna ( 0 ) df [[ f \"RAJ { self . epoch } \" , f \"DEJ { self . epoch } \" , \"tmag\" ]] = np . nan df . loc [ np . abs ( df . Plx / df . e_Plx ) < 2 , \"Plx\" ] = 1e-5 df . loc [ df . Plx == 0 , \"Plx\" ] = 1e-5 def clean ( x ): return x if np . isfinite ( x ) else None with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) for idx in range ( len ( df )): c = SkyCoord ( df . loc [ idx ][ \"RAJ2000\" ] * u . deg , df . loc [ idx ][ \"DEJ2000\" ] * u . deg , frame = \"icrs\" , obstime = \"2020-01-01T00:00:00\" , pm_ra_cosdec = df . loc [ idx ][ \"pmRA\" ] * u . mas / u . yr , pm_dec = df . loc [ idx ][ \"pmDE\" ] * u . mas / u . yr , distance = Distance ( parallax = df . loc [ idx ][ \"Plx\" ] * u . mas , allow_negative = True ), ) . apply_space_motion ( dt = ( self . epoch_decimal - 2000 ) * u . year ) tmag = ticgen . Star ( Bmag = clean ( df . loc [ idx , \"Bmag\" ]), Vmag = clean ( df . loc [ idx , \"Vmag\" ]), Jmag = clean ( df . loc [ idx , \"Jmag\" ]), Hmag = clean ( df . loc [ idx , \"Hmag\" ]), Ksmag = clean ( df . loc [ idx , \"Kmag\" ]), ) . Tmag df . loc [ idx , [ f \"RAJ { self . epoch } \" , f \"DEJ { self . epoch } \" , \"tmag\" ] ] = np . hstack ([ c . ra . deg , c . dec . deg , tmag ]) df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = ( np . asarray ( np . hypot ( df . RAJ2000 - df [ f \"RAJ { self . epoch } \" ], df . DEJ2000 - df [ f \"DEJ { self . epoch } \" ], ) ) * u . deg . to ( u . arcsecond ) / 21 ) return df def to_pandas ( self , ** kwargs ): \"\"\"Converts object to a pandas dataframe for easy storing\"\"\" if not hasattr ( self , \"tic\" ): log . warning ( \"Run `get_tics` first.\" ) return df = pd . DataFrame ( np . vstack ( [ self . tic , self . best_fit_ra , self . best_fit_dec , self . best_fit_magnitude ] ) . T , columns = [ \"TIC\" , \"RA\" , \"Dec\" , \"Tmag\" ], ) if self . magnitude is not None : df [ \"input_magnitude\" ] = self . magnitude df [ \"pix_sep\" ] = self . gdf [ \"pix_sep\" ] df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = self . motion_in_pixels return df def get_target_matches ( self , idx , radius = 0.014 , ntarg = None , non_null_motion_only = False ): \"\"\"Returns an ordered dataframe of the matches to the input Parameters ---------- idx: int The index of the target to calculate the matches for. radius: float Radius in degrees to query around ntarg: Optional, int Number of targets to return. If None, will return all matches. non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. Returns ------- df : pd.DataFrame pandas containing all the information on all matches around the `idx` index target. \"\"\" ra , dec , mag = ( self . ra [ idx ], self . dec [ idx ], self . magnitude [ idx ] if self . magnitude is not None else None , ) log . info ( f \"RA: { ra } , Dec: { dec } , Mag: { mag } \" ) query = get_query ( ra , dec , mag , radius = radius , ntarg = ntarg , non_null_motion_only = non_null_motion_only , ) df = self . tap . launch_job ( query ) . get_results () . to_pandas () return self . _clean_dataframe ( df )","title":"TICFinder"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder.from_csv","text":"Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters: Name Type Description Default fname str Filename required Source code in ticfinder/ticfinder.py 65 66 67 68 69 70 71 72 73 74 @staticmethod def from_csv ( fname ): \"\"\"Read directly from a csv file. Must include RA, Dec and optionally magnitude. Parameters ---------- fname : str Filename \"\"\" return TICFinder . from_pandas ( pd . read_csv ( fname ))","title":"from_csv()"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder.from_pandas","text":"Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters: Name Type Description Default df pd . DataFrame pandas dataframe required Source code in ticfinder/ticfinder.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @staticmethod def from_pandas ( df ): \"\"\"Read directly from a pandas dataframe. Must include RA, Dec and optionally magnitude. Parameters ---------- df : pd.DataFrame pandas dataframe \"\"\" def get_column ( keys ): hits = [ key in df . columns for key in keys ] if np . any ( hits ): return np . asarray ( df [ np . asarray ( keys )[[ key in df . columns for key in keys ]][ 0 ]] ) else : return None return TICFinder ( ra = get_column ([ \"ra\" , \"RA\" , \"RAJ2000\" , \"ra [ deg ]\" ]), dec = get_column ([ \"dec\" , \"Dec\" , \"DEC\" , \"DEJ2000\" , \"dec [ deg ]\" ]), magnitude = get_column ( [ \"tmag\" , \"magnitude\" , \"mag\" , \"tess_mag [ mag ]\" , \"tess_mag\" , \"Tmag\" ] ), )","title":"from_pandas()"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder.get_target_matches","text":"Returns an ordered dataframe of the matches to the input Parameters: Name Type Description Default idx The index of the target to calculate the matches for. required radius Radius in degrees to query around 0.014 ntarg Number of targets to return. If None, will return all matches. None non_null_motion_only Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. False Returns: Name Type Description df pd . DataFrame pandas containing all the information on all matches around the idx index target. Source code in ticfinder/ticfinder.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 def get_target_matches ( self , idx , radius = 0.014 , ntarg = None , non_null_motion_only = False ): \"\"\"Returns an ordered dataframe of the matches to the input Parameters ---------- idx: int The index of the target to calculate the matches for. radius: float Radius in degrees to query around ntarg: Optional, int Number of targets to return. If None, will return all matches. non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. Returns ------- df : pd.DataFrame pandas containing all the information on all matches around the `idx` index target. \"\"\" ra , dec , mag = ( self . ra [ idx ], self . dec [ idx ], self . magnitude [ idx ] if self . magnitude is not None else None , ) log . info ( f \"RA: { ra } , Dec: { dec } , Mag: { mag } \" ) query = get_query ( ra , dec , mag , radius = radius , ntarg = ntarg , non_null_motion_only = non_null_motion_only , ) df = self . tap . launch_job ( query ) . get_results () . to_pandas () return self . _clean_dataframe ( df )","title":"get_target_matches()"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder.get_tics","text":"Populates the tic attribute. Run this to fetch the TIC numbers Parameters: Name Type Description Default non_null_motion_only Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. False show_progress Whether to show a progress bar. You can silence the progress bar by setting this to False. True Source code in ticfinder/ticfinder.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def get_tics ( self , non_null_motion_only = False , show_progress = True ): \"\"\"Populates the `tic` attribute. Run this to fetch the TIC numbers Parameters ---------- non_null_motion_only: bool Whether to return targets that have non NULL values for pmRA, pmDE, and Plx. If True, will only return targets where all three are valued. show_progress: bool Whether to show a progress bar. You can silence the progress bar by setting this to False. \"\"\" gdf = [] for idx in tqdm ( range ( len ( self . ra )), desc = \"Cross matching targets\" ): ra , dec , magnitude = ( self . ra [ idx ], self . dec [ idx ], self . magnitude if self . magnitude is None else self . magnitude [ idx ], ) for idx in np . arange ( 1 , 4 ): radius = 50 * idx ** 2 / 3600.0 query = get_query ( ra , dec , magnitude , radius = radius , non_null_motion_only = non_null_motion_only , ntarg = 1 , ) job = self . tap . launch_job ( query ) series = job . get_results () . to_pandas () if len ( series ) != 0 : break if len ( series ) == 0 : series = pd . Series ( index = [ \"ra_input\" , \"dec_input\" , \"magnitude_input\" , \"TIC\" , \"RAJ2000\" , \"DEJ2000\" , \"pmRA\" , \"pmDE\" , \"Plx\" , \"e_Plx\" , \"RPmag\" , \"Bmag\" , \"Vmag\" , \"Hmag\" , \"Kmag\" , \"Jmag\" , \"pix_sep\" , \"weight\" , \"RAJ2022\" , \"DEJ2022\" , \"tmag\" , \"motion_from_2000_to_2022_in_pixels\" , ], dtype = np . float64 , ) series [[ \"ra_input\" , \"dec_input\" , \"magnitude_input\" ]] = ( ra , dec , magnitude if magnitude is not None else np . nan , ) series = pd . DataFrame ([ series ]) if len ( series ) != 1 : raise ValueError gdf . append ( series ) gdf = pd . concat ( gdf ) . reset_index ( drop = True ) self . gdf = self . _clean_dataframe ( gdf ) self . tic = np . asarray ( gdf . TIC ) self . best_fit_ra = np . asarray ( gdf [ \"RAJ2000\" ]) self . best_fit_dec = np . asarray ( gdf [ \"DEJ2000\" ]) self . best_fit_magnitude = np . asarray ( gdf . tmag ) self . motion_in_pixels = np . asarray ( gdf [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] )","title":"get_tics()"},{"location":"ticfinder/#ticfinder.ticfinder.TICFinder.to_pandas","text":"Converts object to a pandas dataframe for easy storing Source code in ticfinder/ticfinder.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def to_pandas ( self , ** kwargs ): \"\"\"Converts object to a pandas dataframe for easy storing\"\"\" if not hasattr ( self , \"tic\" ): log . warning ( \"Run `get_tics` first.\" ) return df = pd . DataFrame ( np . vstack ( [ self . tic , self . best_fit_ra , self . best_fit_dec , self . best_fit_magnitude ] ) . T , columns = [ \"TIC\" , \"RA\" , \"Dec\" , \"Tmag\" ], ) if self . magnitude is not None : df [ \"input_magnitude\" ] = self . magnitude df [ \"pix_sep\" ] = self . gdf [ \"pix_sep\" ] df [ f \"motion_from_2000_to_ { self . epoch } _in_pixels\" ] = self . motion_in_pixels return df","title":"to_pandas()"},{"location":"ticfinder/#ticfinder.ticfinder.get_query","text":"Builds a TAP query to get matches for a given RA, Dec and magnitude. Source code in ticfinder/ticfinder.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def get_query ( ra , dec , magnitude = None , ntarg = None , radius = 0.014 , non_null_motion_only = False ): \"\"\"Builds a TAP query to get matches for a given RA, Dec and magnitude.\"\"\" motion = [ \"\"\"\\nAND pmRA IS NOT NULL AND pmDE IS NOT NULL AND Plx IS NOT NULL \"\"\" if non_null_motion_only else \"\" ][ 0 ] ntarg_statement = f \"\"\"TOP { ntarg } \"\"\" if ntarg is not None else \"\" mag0 = f \"\"\" { magnitude } as magnitude_input,\"\"\" if magnitude is not None else \"\" mag1 = ( f \"\"\"* 1/(2*POWER(10, ABS( { magnitude } - RPMag) * -0.4))\"\"\" if magnitude is not None else \"\" ) mag2 = ( f \"\"\"AND RPmag >= { magnitude - 3 } AND RPmag <= { magnitude + 3 } \"\"\" if magnitude is not None else \"\" ) query = f \"\"\"SELECT { ntarg_statement } { ra } as ra_input, { dec } as dec_input, { mag0 } TIC, RAJ2000, DEJ2000, pmRA, pmDE, Plx, e_Plx, RPmag, Bmag, Vmag, Hmag, Kmag, Jmag, DISTANCE( POINT('ICRS', RAJ2000, DEJ2000), POINT('ICRS', { ra } , { dec } )) * 3600/21 as pix_sep, 1/POWER(DISTANCE( POINT('ICRS', RAJ2000, DEJ2000), POINT('ICRS', { ra } , { dec } )) * 3600/21, 2) { mag1 } as weight FROM \"IV/38/tic\" WHERE 1=CONTAINS(POINT('ICRS',RAJ2000,DEJ2000), CIRCLE('ICRS', { ra } , { dec } , { radius } )) { mag2 } { motion } ORDER BY weight DESC\"\"\" return query","title":"get_query()"}]}